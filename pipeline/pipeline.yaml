# YAML anchors
shared:
# Task : sync and merge with rsync 2 rep. Used to merge stack and config
- &merge-stack-and-config
  platform: linux
  image_resource:
    type: registry-image
    source:
      repository: cycloid/cycloid-toolkit
      tag: latest
  run:
    path: /usr/bin/merge-stack-and-config


resource_types:
  - name: terraform
    type: registry-image
    source:
      repository: cycloid/terraform-resource
      tag: ((terraform_version))

  - name: cycloid-resource
    type: registry-image
    source:
      repository: cycloid/cycloid-resource
      tag: latest

  - name: gitlab-pipeline
    type: docker-image
    source:
      repository: public.ecr.aws/cycloid-demo/gitlab-pipeline-resource

resources:
  - name: tfstate
    type: terraform
    icon: terraform
    source:
      env_name: ((env))
      backend_type: http
      backend_config:
        address: '((cycloid_api_url))/inventory?jwt=((cycloid_inventory_jwt))'
      vars:
        aws_cred: ((aws_cred))
        aws_region: ((aws_region))
        keypair_public: ((keypair_public))
        env: ((env))
        project: ((project))
        customer: ((customer))

  # The Terraform stack (will be merged with the config)
  - name: git_stack-terraform
    type: git
    icon: git
    source:
      uri: ((stack_git_repository))
      branch: ((stack_git_branch))
      private_key: ((stack_git_private_key))
      paths:
        - ((stack_terraform_path))/*

  # The Terraform config (will be merged with the stack)
  - name: git_config-terraform
    type: git
    icon: git
    source:
      uri: ((config_git_repository))
      branch: ((config_git_branch))
      private_key: ((config_git_private_key))
      paths:
        - ((config_terraform_path))/*

  # Terracost resource
  - name: terracost
    type: cycloid-resource
    source:
      feature: terracost
      api_key: ((cycloid_api_key))
      api_url: ((cycloid_api_url))
      env: ((env))
      org: ((customer))
      project: ((project))

  - name: secret-pipeline
    type: gitlab-pipeline
    source:
      base_url: ((gitlab-api-address))
      project_id: ((project_id_secret))
      trigger_token: ((pipeline_token_secret))
      access_token: ((access_token_secret))
      ref: ((DEP_ENVIRONMENT_INFRA_BRANCH))
      variables:
        ACTION: ((SEC_ACTION))
        SECRET_NAME: ((SEC_SECRET_NAME))
        REGION: ((SEC_REGION))
        AWS_ACCESS_KEY: ((SEC_AWS_ACCESS_KEY))
        AWS_SECRET_KEY: ((SEC_AWS_SECRET_KEY))
        AWS_SESSION_TOKEN: ((SEC_AWS_SESSION_TOKEN))
        INFRA_PASSWORD: ((SEC_INFRA_PASSWORD))
        SPLUNK_TOKEN: ((SEC_SPLUNK_TOKEN))
        VCS_OAUTH_TOKEN_ID: ((SEC_VCS_OAUTH_TOKEN_ID))
        GITLAB_PERSONAL_ACCESS_TOKEN: ((SEC_GITLAB_PERSONAL_ACCESS_TOKEN))
        GITLAB_USER: ((SEC_GITLAB_USER))
        PLT_APP_GITLAB_TOKEN: ((SEC_PLT_APP_GITLAB_TOKEN))
        ENV_APP_GITLAB_TOKEN: ((SEC_ENV_APP_GITLAB_TOKEN))

  - name: deploy-pipeline
    type: gitlab-pipeline
    source:
      base_url: ((gitlab-api-address))
      project_id: ((project_id_deploy))
      trigger_token: ((pipeline_token_deploy))
      access_token: ((access_token_deploy))
      ref: ((DEP_ENVIRONMENT_INFRA_BRANCH))
      variables:
        ACTION: ((DEP_ACTION))
        CONFIG_DIR: ((DEP_CONFIG_DIR))
        ENVIRONMENT_LAYER_NAME: ((DEP_ENVIRONMENT_LAYER_NAME))
        ENVIRONMENT_SUFFIX: ((DEP_ENVIRONMENT_SUFFIX))
        ENVIRONMENT_INFRA_BRANCH: ((DEP_ENVIRONMENT_INFRA_BRANCH))
        TF_LOG: ((DEP_TF_LOG))
        AWS_ACCESS_KEY: ((DEP_AWS_ACCESS_KEY))
        AWS_SECRET_KEY: ((DEP_AWS_SECRET_KEY))
        AWS_SESSION_TOKEN: ((DEP_AWS_SESSION_TOKEN))
        AWS_REGION: ((DEP_AWS_REGION))
        TYPE_ENV: ((DEP_TYPE_ENV))


groups:
- name: overview
  jobs:
    - terraform-plan
    - secret-management
    - deploy-infra

jobs:
  - name: terraform-plan
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: true
        - get: git_config-terraform
          trigger: true
      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
          outputs:
          - name: merged-stack
            path: "merged-stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))
      - put: tfstate
        params:
          plan_only: true
          terraform_source: merged-stack/
        get_params:
          # Generate a plan.json file for infrapolicy check - more info at https://github.com/ljfranklin/terraform-resource
          output_planfile: true
      # Do the terracost check
      - put: terracost
        params:
          tfplan_path: tfstate/plan.json

  - name: secret-management
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: true
          passed:
            - terraform-plan
        - get: git_config-terraform
          trigger: true
          passed:
            - terraform-plan
      - put: secret-pipeline

  - name: deploy-infra
    plan:
      - get: secret-pipeline
        trigger: true
        passed:
          - secret-management
          
      - put: deploy-pipeline